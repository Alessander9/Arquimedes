@model Arquimedes.Models.Profesor

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Actualizar Profesor</title>
    <!-- Material Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <!-- SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

    <style>
        body {
            background-image: linear-gradient(to right, #5e7d82, #3c6c7c, #185a79, #004774, #00326a, #002863, #031d5b, #081252, #08114f, #08104d, #070e4a, #070d48);
        }
    </style>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-900 flex items-center justify-center min-h-screen">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

    <div class="bg-white shadow-lg rounded-lg p-8 w-full max-w-4xl">
        <h1 class="text-3xl font-bold text-blue-600 mb-6 flex items-center gap-2">
            <span class="material-icons text-blue-500 text-2xl">
                edit
            </span>
            Actualizar Profesor
        </h1>
        <hr class="mb-6 border-gray-300" />

        @Html.ValidationSummary(true, "", new { @class = "text-red-500 text-sm mb-4" })
        @Html.HiddenFor(model => model.IdProfesor)

        <!-- Contenedor de 2 columnas -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- NombreProfesor -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                    <span class="material-icons text-blue-500">
                        person
                    </span>
                    Nombre
                </label>
                @Html.EditorFor(model => model.NombreProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                @Html.ValidationMessageFor(model => model.NombreProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
            </div>

            <!-- ApellidoProfesor -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                    <span class="material-icons text-blue-500">
                        badge
                    </span>
                    Apellido
                </label>
                @Html.EditorFor(model => model.ApellidoProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                @Html.ValidationMessageFor(model => model.ApellidoProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
            </div>

            <!-- EdadProfesor -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                    <span class="material-icons text-blue-500">
                        event
                    </span>
                    Edad
                </label>
                @Html.EditorFor(model => model.EdadProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                @Html.ValidationMessageFor(model => model.EdadProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
            </div>

            <!-- DniProfesor -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                    <span class="material-icons text-blue-500">
                        id_badge
                    </span>
                    DNI
                </label>
                @Html.EditorFor(model => model.DniProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                @Html.ValidationMessageFor(model => model.DniProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
            </div>

            <!-- TelefonoProfesor -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                    <span class="material-icons text-blue-500">
                        phone
                    </span>
                    Teléfono
                </label>
                @Html.EditorFor(model => model.TelefonoProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                @Html.ValidationMessageFor(model => model.TelefonoProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
            </div>

            <!-- DireccionProfesor -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                    <span class="material-icons text-blue-500">
                        location_on
                    </span>
                    Dirección
                </label>
                @Html.EditorFor(model => model.DireccionProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                @Html.ValidationMessageFor(model => model.DireccionProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
            </div>

            <!-- EstadoProfesor -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                    <span class="material-icons text-blue-500">
                        check_circle
                    </span>
                    Estado
                </label>
                @Html.DropDownListFor(
                    model => model.EstadoProfesor,
                    new List<SelectListItem>
                    {
                        new SelectListItem { Value = "Activo", Text = "Activo" },
                        new SelectListItem { Value = "Inactivo", Text = "Inactivo" }
                    },
                    "-- Seleccione un estado --",
                    new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" }
                )
                @Html.ValidationMessageFor(model => model.EstadoProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
            </div>
        </div>

        <!-- Botón de Enviar -->
        <div class="flex justify-end mt-6">
            <input type="submit" value="Guardar" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg shadow" />
        </div>

        <!-- Enlace Regresar -->
        <div class="mt-4 text-center">
            @Html.ActionLink("Regresar a la Lista", "ListarProfesores", null, new { @class = "text-blue-500 hover:underline" })
        </div>

        <!-- Botón Volver con Gradiente Rojo a Morado -->
        <div class="mt-4 flex justify-end space-x-2">

            <a href="@Url.Action("vistaAdministrador", "Administrador")" class="px-4 py-2 bg-gradient-to-r from-red-500 to-purple-600 text-white rounded-lg shadow-md hover:from-red-600 hover:to-purple-700 flex items-center gap-2 transition-colors duration-300">
                <span class="material-icons">arrow_back</span> Salir al menú
            </a>
        </div>

    </div>
    }

    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Verificar si hay un mensaje de éxito
            @if (TempData["Success"] != null)
            {
                <text>
                    Swal.fire({
                        icon: 'success',
                        title: 'Éxito',
                        text: '@TempData["Success"]',
                        confirmButtonColor: '#3085d6',
                        confirmButtonText: 'OK'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            window.location.href = '@Url.Action("ListarProfesores")';
                        }
                    });
                </text>
            }

            // Verificar si hay un mensaje de error
            @if (TempData["Error"] != null)
            {
                <text>
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: '@TempData["Error"]',
                        confirmButtonColor: '#d33',
                        confirmButtonText: 'OK'
                    });
                </text>
            }

            // Confirmación antes de enviar el formulario
            const form = document.querySelector('form');
            form.addEventListener('submit', function (e) {
                e.preventDefault(); // Prevenir el envío inmediato

                Swal.fire({
                    title: '¿Estás seguro?',
                    text: "¿Deseas actualizar la información del profesor?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Sí, actualizar',
                    cancelButtonText: 'Cancelar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit(); // Enviar el formulario si el usuario confirma
                    }
                });
            });
        });
    </script>
</body>
</html>
