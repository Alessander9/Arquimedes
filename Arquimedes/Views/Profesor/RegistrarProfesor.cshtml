@model Arquimedes.Models.Profesor

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Registrar Profesor</title>
    <style>
        body {
            background-image: linear-gradient(to right, #5e7d82, #3c6c7c, #185a79, #004774, #00326a, #002863, #031d5b, #081252, #08114f, #08104d, #070e4a, #070d48);
        }
    </style>
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Material Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

</head>
<body class="bg-gray-100 text-gray-900 flex items-center justify-center min-h-screen">
    @using (Html.BeginForm("RegistrarProfesor", "Profesor", FormMethod.Post, new { id = "registrarProfesorForm" }))
    {
        @Html.AntiForgeryToken()

        <div class="bg-white shadow-lg rounded-lg p-8 w-full max-w-4xl">
            <h1 class="text-3xl font-bold text-blue-600 mb-6 flex items-center gap-2">
                <span class="material-icons text-blue-500">person_add</span>
                Registrar Profesor
            </h1>
            <hr class="mb-6 border-gray-300" />

            @Html.ValidationSummary(true, "", new { @class = "text-red-500 text-sm mb-4" })

            <div class="grid grid-cols-2 gap-6">
                <!-- IdProfesor -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                        <span class="material-icons text-blue-500">badge</span> Identificador
                    </label>
                    @Html.EditorFor(model => model.IdProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                    @Html.ValidationMessageFor(model => model.IdProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
                </div>

                <!-- NombreProfesor -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                        <span class="material-icons text-blue-500">person</span> Nombre
                    </label>
                    @Html.EditorFor(model => model.NombreProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                    @Html.ValidationMessageFor(model => model.NombreProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
                </div>

                <!-- ApellidoProfesor -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                        <span class="material-icons text-blue-500">account_circle</span> Apellido
                    </label>
                    @Html.EditorFor(model => model.ApellidoProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                    @Html.ValidationMessageFor(model => model.ApellidoProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
                </div>

                <!-- EdadProfesor -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                        <span class="material-icons text-blue-500">cake</span> Edad
                    </label>
                    @Html.EditorFor(model => model.EdadProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                    @Html.ValidationMessageFor(model => model.EdadProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
                </div>

                <!-- DniProfesor -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                        <span class="material-icons text-blue-500">credit_card</span> DNI
                    </label>
                    @Html.EditorFor(model => model.DniProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                    @Html.ValidationMessageFor(model => model.DniProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
                </div>

                <!-- TelefonoProfesor -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                        <span class="material-icons text-blue-500">phone</span> Teléfono
                    </label>
                    @Html.EditorFor(model => model.TelefonoProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                    @Html.ValidationMessageFor(model => model.TelefonoProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
                </div>

                <!-- DireccionProfesor -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                        <span class="material-icons text-blue-500">location_on</span> Dirección
                    </label>
                    @Html.EditorFor(model => model.DireccionProfesor, new { htmlAttributes = new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" } })
                    @Html.ValidationMessageFor(model => model.DireccionProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
                </div>

                <!-- EstadoProfesor -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-2">
                        <span class="material-icons text-blue-500">assignment</span> Estado
                    </label>
                    @Html.DropDownListFor(
                        model => model.EstadoProfesor,
                        new List<SelectListItem>
                        {
                            new SelectListItem { Value = "Activo", Text = "Activo" },
                            new SelectListItem { Value = "Inactivo", Text = "Inactivo" }
                        },
                        "-- Seleccione un estado --",
                        new { @class = "w-full border border-gray-300 rounded-lg p-3 focus:ring-blue-500 focus:border-blue-500" }
                    )
                    @Html.ValidationMessageFor(model => model.EstadoProfesor, "", new { @class = "text-red-500 text-sm mt-1" })
                </div>
            </div>

            <div class="flex justify-end gap-4 mt-6">
                <a href="@Url.Action("ListarProfesores", "Profesor")" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-lg flex items-center gap-2">
                    <span class="material-icons">cancel</span> Cancelar
                </a>
                <button type="button" id="btnRegistrar" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg shadow flex items-center gap-2">
                    <span class="material-icons">person_add</span> Registrar
                </button>
                <!-- Botón Volver con Gradiente Rojo a Morado -->
                <div class="mt-4 flex justify-end space-x-2">

                    <a href="@Url.Action("vistaAdministrador", "Administrador")" class="px-4 py-2 bg-gradient-to-r from-red-500 to-purple-600 text-white rounded-lg shadow-md hover:from-red-600 hover:to-purple-700 flex items-center gap-2 transition-colors duration-300">
                        <span class="material-icons">arrow_back</span> Salir al menú
                    </a>
                </div>
            </div>
        </div>
    }

    <!-- SweetAlert Script -->
    <script>
        document.getElementById("btnRegistrar").addEventListener("click", function () {
            Swal.fire({
                title: '¿Estás seguro?',
                text: "¿Deseas registrar este profesor?",
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Sí, registrar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById("registrarProfesorForm").submit();
                }
            });
        });
    </script>
</body>
</html>
